// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uselagoon/ssh-portal/internal/sshtoken (interfaces: LagoonDBService,KeycloakTokenService)
//
// Generated by this command:
//
//	mockgen -package=sshtoken_test -destination=sshtoken_mock_test.go -write_generate_directive . LagoonDBService,KeycloakTokenService
//

// Package sshtoken_test is a generated GoMock package.
package sshtoken_test

import (
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	lagoondb "github.com/uselagoon/ssh-portal/internal/lagoondb"
	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -package=sshtoken_test -destination=sshtoken_mock_test.go -write_generate_directive . LagoonDBService,KeycloakTokenService

// MockLagoonDBService is a mock of LagoonDBService interface.
type MockLagoonDBService struct {
	ctrl     *gomock.Controller
	recorder *MockLagoonDBServiceMockRecorder
}

// MockLagoonDBServiceMockRecorder is the mock recorder for MockLagoonDBService.
type MockLagoonDBServiceMockRecorder struct {
	mock *MockLagoonDBService
}

// NewMockLagoonDBService creates a new mock instance.
func NewMockLagoonDBService(ctrl *gomock.Controller) *MockLagoonDBService {
	mock := &MockLagoonDBService{ctrl: ctrl}
	mock.recorder = &MockLagoonDBServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLagoonDBService) EXPECT() *MockLagoonDBServiceMockRecorder {
	return m.recorder
}

// EnvironmentByNamespaceName mocks base method.
func (m *MockLagoonDBService) EnvironmentByNamespaceName(arg0 context.Context, arg1 string) (*lagoondb.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentByNamespaceName", arg0, arg1)
	ret0, _ := ret[0].(*lagoondb.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentByNamespaceName indicates an expected call of EnvironmentByNamespaceName.
func (mr *MockLagoonDBServiceMockRecorder) EnvironmentByNamespaceName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentByNamespaceName", reflect.TypeOf((*MockLagoonDBService)(nil).EnvironmentByNamespaceName), arg0, arg1)
}

// SSHEndpointByEnvironmentID mocks base method.
func (m *MockLagoonDBService) SSHEndpointByEnvironmentID(arg0 context.Context, arg1 int) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHEndpointByEnvironmentID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SSHEndpointByEnvironmentID indicates an expected call of SSHEndpointByEnvironmentID.
func (mr *MockLagoonDBServiceMockRecorder) SSHEndpointByEnvironmentID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHEndpointByEnvironmentID", reflect.TypeOf((*MockLagoonDBService)(nil).SSHEndpointByEnvironmentID), arg0, arg1)
}

// SSHKeyUsed mocks base method.
func (m *MockLagoonDBService) SSHKeyUsed(arg0 context.Context, arg1 string, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHKeyUsed", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SSHKeyUsed indicates an expected call of SSHKeyUsed.
func (mr *MockLagoonDBServiceMockRecorder) SSHKeyUsed(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHKeyUsed", reflect.TypeOf((*MockLagoonDBService)(nil).SSHKeyUsed), arg0, arg1, arg2)
}

// UserBySSHFingerprint mocks base method.
func (m *MockLagoonDBService) UserBySSHFingerprint(arg0 context.Context, arg1 string) (*lagoondb.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserBySSHFingerprint", arg0, arg1)
	ret0, _ := ret[0].(*lagoondb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserBySSHFingerprint indicates an expected call of UserBySSHFingerprint.
func (mr *MockLagoonDBServiceMockRecorder) UserBySSHFingerprint(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserBySSHFingerprint", reflect.TypeOf((*MockLagoonDBService)(nil).UserBySSHFingerprint), arg0, arg1)
}

// MockKeycloakTokenService is a mock of KeycloakTokenService interface.
type MockKeycloakTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockKeycloakTokenServiceMockRecorder
}

// MockKeycloakTokenServiceMockRecorder is the mock recorder for MockKeycloakTokenService.
type MockKeycloakTokenServiceMockRecorder struct {
	mock *MockKeycloakTokenService
}

// NewMockKeycloakTokenService creates a new mock instance.
func NewMockKeycloakTokenService(ctrl *gomock.Controller) *MockKeycloakTokenService {
	mock := &MockKeycloakTokenService{ctrl: ctrl}
	mock.recorder = &MockKeycloakTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeycloakTokenService) EXPECT() *MockKeycloakTokenServiceMockRecorder {
	return m.recorder
}

// UserAccessToken mocks base method.
func (m *MockKeycloakTokenService) UserAccessToken(arg0 context.Context, arg1 uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAccessToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAccessToken indicates an expected call of UserAccessToken.
func (mr *MockKeycloakTokenServiceMockRecorder) UserAccessToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAccessToken", reflect.TypeOf((*MockKeycloakTokenService)(nil).UserAccessToken), arg0, arg1)
}

// UserAccessTokenResponse mocks base method.
func (m *MockKeycloakTokenService) UserAccessTokenResponse(arg0 context.Context, arg1 uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAccessTokenResponse", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAccessTokenResponse indicates an expected call of UserAccessTokenResponse.
func (mr *MockKeycloakTokenServiceMockRecorder) UserAccessTokenResponse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAccessTokenResponse", reflect.TypeOf((*MockKeycloakTokenService)(nil).UserAccessTokenResponse), arg0, arg1)
}
