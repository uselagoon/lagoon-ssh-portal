// Code generated by MockGen. DO NOT EDIT.
// Source: ../permission.go
//
// Generated by this command:
//
//	mockgen -source=../permission.go -package=mock -destination=permission.go -write_generate_directive
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	lagoon "github.com/uselagoon/ssh-portal/internal/lagoon"
	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -source=../permission.go -package=mock -destination=permission.go -write_generate_directive

// MockKeycloakService is a mock of KeycloakService interface.
type MockKeycloakService struct {
	ctrl     *gomock.Controller
	recorder *MockKeycloakServiceMockRecorder
}

// MockKeycloakServiceMockRecorder is the mock recorder for MockKeycloakService.
type MockKeycloakServiceMockRecorder struct {
	mock *MockKeycloakService
}

// NewMockKeycloakService creates a new mock instance.
func NewMockKeycloakService(ctrl *gomock.Controller) *MockKeycloakService {
	mock := &MockKeycloakService{ctrl: ctrl}
	mock.recorder = &MockKeycloakServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeycloakService) EXPECT() *MockKeycloakServiceMockRecorder {
	return m.recorder
}

// AncestorGroups mocks base method.
func (m *MockKeycloakService) AncestorGroups(arg0 context.Context, arg1 []uuid.UUID) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AncestorGroups", arg0, arg1)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AncestorGroups indicates an expected call of AncestorGroups.
func (mr *MockKeycloakServiceMockRecorder) AncestorGroups(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AncestorGroups", reflect.TypeOf((*MockKeycloakService)(nil).AncestorGroups), arg0, arg1)
}

// UserGroupIDRole mocks base method.
func (m *MockKeycloakService) UserGroupIDRole(arg0 context.Context, arg1 []string) map[uuid.UUID]lagoon.UserRole {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGroupIDRole", arg0, arg1)
	ret0, _ := ret[0].(map[uuid.UUID]lagoon.UserRole)
	return ret0
}

// UserGroupIDRole indicates an expected call of UserGroupIDRole.
func (mr *MockKeycloakServiceMockRecorder) UserGroupIDRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGroupIDRole", reflect.TypeOf((*MockKeycloakService)(nil).UserGroupIDRole), arg0, arg1)
}

// UserRolesAndGroups mocks base method.
func (m *MockKeycloakService) UserRolesAndGroups(arg0 context.Context, arg1 uuid.UUID) ([]string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRolesAndGroups", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserRolesAndGroups indicates an expected call of UserRolesAndGroups.
func (mr *MockKeycloakServiceMockRecorder) UserRolesAndGroups(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRolesAndGroups", reflect.TypeOf((*MockKeycloakService)(nil).UserRolesAndGroups), arg0, arg1)
}

// MockLagoonDBService is a mock of LagoonDBService interface.
type MockLagoonDBService struct {
	ctrl     *gomock.Controller
	recorder *MockLagoonDBServiceMockRecorder
}

// MockLagoonDBServiceMockRecorder is the mock recorder for MockLagoonDBService.
type MockLagoonDBServiceMockRecorder struct {
	mock *MockLagoonDBService
}

// NewMockLagoonDBService creates a new mock instance.
func NewMockLagoonDBService(ctrl *gomock.Controller) *MockLagoonDBService {
	mock := &MockLagoonDBService{ctrl: ctrl}
	mock.recorder = &MockLagoonDBServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLagoonDBService) EXPECT() *MockLagoonDBServiceMockRecorder {
	return m.recorder
}

// ProjectGroupIDs mocks base method.
func (m *MockLagoonDBService) ProjectGroupIDs(arg0 context.Context, arg1 int) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectGroupIDs", arg0, arg1)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectGroupIDs indicates an expected call of ProjectGroupIDs.
func (mr *MockLagoonDBServiceMockRecorder) ProjectGroupIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectGroupIDs", reflect.TypeOf((*MockLagoonDBService)(nil).ProjectGroupIDs), arg0, arg1)
}
