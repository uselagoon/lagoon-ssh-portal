// Code generated by "enumer -type=EnvironmentType -sql -transform=lower"; DO NOT EDIT.

package lagoon

import (
	"database/sql/driver"
	"fmt"
	"strings"
)

const _EnvironmentTypeName = "developmentproduction"

var _EnvironmentTypeIndex = [...]uint8{0, 11, 21}

const _EnvironmentTypeLowerName = "developmentproduction"

func (i EnvironmentType) String() string {
	if i < 0 || i >= EnvironmentType(len(_EnvironmentTypeIndex)-1) {
		return fmt.Sprintf("EnvironmentType(%d)", i)
	}
	return _EnvironmentTypeName[_EnvironmentTypeIndex[i]:_EnvironmentTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EnvironmentTypeNoOp() {
	var x [1]struct{}
	_ = x[Development-(0)]
	_ = x[Production-(1)]
}

var _EnvironmentTypeValues = []EnvironmentType{Development, Production}

var _EnvironmentTypeNameToValueMap = map[string]EnvironmentType{
	_EnvironmentTypeName[0:11]:       Development,
	_EnvironmentTypeLowerName[0:11]:  Development,
	_EnvironmentTypeName[11:21]:      Production,
	_EnvironmentTypeLowerName[11:21]: Production,
}

var _EnvironmentTypeNames = []string{
	_EnvironmentTypeName[0:11],
	_EnvironmentTypeName[11:21],
}

// EnvironmentTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EnvironmentTypeString(s string) (EnvironmentType, error) {
	if val, ok := _EnvironmentTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _EnvironmentTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to EnvironmentType values", s)
}

// EnvironmentTypeValues returns all values of the enum
func EnvironmentTypeValues() []EnvironmentType {
	return _EnvironmentTypeValues
}

// EnvironmentTypeStrings returns a slice of all String values of the enum
func EnvironmentTypeStrings() []string {
	strs := make([]string, len(_EnvironmentTypeNames))
	copy(strs, _EnvironmentTypeNames)
	return strs
}

// IsAEnvironmentType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i EnvironmentType) IsAEnvironmentType() bool {
	for _, v := range _EnvironmentTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

func (i EnvironmentType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *EnvironmentType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of EnvironmentType: %[1]T(%[1]v)", value)
	}

	val, err := EnvironmentTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
