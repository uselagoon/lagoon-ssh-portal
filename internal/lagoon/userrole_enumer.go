// Code generated by "enumer -type=UserRole -sql -transform=lower"; DO NOT EDIT.

package lagoon

import (
	"database/sql/driver"
	"fmt"
	"strings"
)

const _UserRoleName = "guestreporterdevelopermaintainerowner"

var _UserRoleIndex = [...]uint8{0, 5, 13, 22, 32, 37}

const _UserRoleLowerName = "guestreporterdevelopermaintainerowner"

func (i UserRole) String() string {
	if i < 0 || i >= UserRole(len(_UserRoleIndex)-1) {
		return fmt.Sprintf("UserRole(%d)", i)
	}
	return _UserRoleName[_UserRoleIndex[i]:_UserRoleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _UserRoleNoOp() {
	var x [1]struct{}
	_ = x[Guest-(0)]
	_ = x[Reporter-(1)]
	_ = x[Developer-(2)]
	_ = x[Maintainer-(3)]
	_ = x[Owner-(4)]
}

var _UserRoleValues = []UserRole{Guest, Reporter, Developer, Maintainer, Owner}

var _UserRoleNameToValueMap = map[string]UserRole{
	_UserRoleName[0:5]:        Guest,
	_UserRoleLowerName[0:5]:   Guest,
	_UserRoleName[5:13]:       Reporter,
	_UserRoleLowerName[5:13]:  Reporter,
	_UserRoleName[13:22]:      Developer,
	_UserRoleLowerName[13:22]: Developer,
	_UserRoleName[22:32]:      Maintainer,
	_UserRoleLowerName[22:32]: Maintainer,
	_UserRoleName[32:37]:      Owner,
	_UserRoleLowerName[32:37]: Owner,
}

var _UserRoleNames = []string{
	_UserRoleName[0:5],
	_UserRoleName[5:13],
	_UserRoleName[13:22],
	_UserRoleName[22:32],
	_UserRoleName[32:37],
}

// UserRoleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UserRoleString(s string) (UserRole, error) {
	if val, ok := _UserRoleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _UserRoleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to UserRole values", s)
}

// UserRoleValues returns all values of the enum
func UserRoleValues() []UserRole {
	return _UserRoleValues
}

// UserRoleStrings returns a slice of all String values of the enum
func UserRoleStrings() []string {
	strs := make([]string, len(_UserRoleNames))
	copy(strs, _UserRoleNames)
	return strs
}

// IsAUserRole returns "true" if the value is listed in the enum definition. "false" otherwise
func (i UserRole) IsAUserRole() bool {
	for _, v := range _UserRoleValues {
		if i == v {
			return true
		}
	}
	return false
}

func (i UserRole) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *UserRole) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of UserRole: %[1]T(%[1]v)", value)
	}

	val, err := UserRoleString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
