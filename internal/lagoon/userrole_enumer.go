// Code generated by "enumer -type=UserRole -transform=lower"; DO NOT EDIT.

package lagoon

import (
	"fmt"
	"strings"
)

const _UserRoleName = "invaliduserroleguestreporterdevelopermaintainerowner"

var _UserRoleIndex = [...]uint8{0, 15, 20, 28, 37, 47, 52}

const _UserRoleLowerName = "invaliduserroleguestreporterdevelopermaintainerowner"

func (i UserRole) String() string {
	if i < 0 || i >= UserRole(len(_UserRoleIndex)-1) {
		return fmt.Sprintf("UserRole(%d)", i)
	}
	return _UserRoleName[_UserRoleIndex[i]:_UserRoleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _UserRoleNoOp() {
	var x [1]struct{}
	_ = x[InvalidUserRole-(0)]
	_ = x[Guest-(1)]
	_ = x[Reporter-(2)]
	_ = x[Developer-(3)]
	_ = x[Maintainer-(4)]
	_ = x[Owner-(5)]
}

var _UserRoleValues = []UserRole{InvalidUserRole, Guest, Reporter, Developer, Maintainer, Owner}

var _UserRoleNameToValueMap = map[string]UserRole{
	_UserRoleName[0:15]:       InvalidUserRole,
	_UserRoleLowerName[0:15]:  InvalidUserRole,
	_UserRoleName[15:20]:      Guest,
	_UserRoleLowerName[15:20]: Guest,
	_UserRoleName[20:28]:      Reporter,
	_UserRoleLowerName[20:28]: Reporter,
	_UserRoleName[28:37]:      Developer,
	_UserRoleLowerName[28:37]: Developer,
	_UserRoleName[37:47]:      Maintainer,
	_UserRoleLowerName[37:47]: Maintainer,
	_UserRoleName[47:52]:      Owner,
	_UserRoleLowerName[47:52]: Owner,
}

var _UserRoleNames = []string{
	_UserRoleName[0:15],
	_UserRoleName[15:20],
	_UserRoleName[20:28],
	_UserRoleName[28:37],
	_UserRoleName[37:47],
	_UserRoleName[47:52],
}

// UserRoleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UserRoleString(s string) (UserRole, error) {
	if val, ok := _UserRoleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _UserRoleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to UserRole values", s)
}

// UserRoleValues returns all values of the enum
func UserRoleValues() []UserRole {
	return _UserRoleValues
}

// UserRoleStrings returns a slice of all String values of the enum
func UserRoleStrings() []string {
	strs := make([]string, len(_UserRoleNames))
	copy(strs, _UserRoleNames)
	return strs
}

// IsAUserRole returns "true" if the value is listed in the enum definition. "false" otherwise
func (i UserRole) IsAUserRole() bool {
	for _, v := range _UserRoleValues {
		if i == v {
			return true
		}
	}
	return false
}
