// Code generated by MockGen. DO NOT EDIT.
// Source: ../sshserver/sessionhandler.go
//
// Generated by this command:
//
//	mockgen -source=../sshserver/sessionhandler.go -package=mock -destination=sshserver_sessionhandler.go -write_generate_directive
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	ssh "github.com/gliderlabs/ssh"
	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -source=../sshserver/sessionhandler.go -package=mock -destination=sshserver_sessionhandler.go -write_generate_directive

// MockK8SAPIService is a mock of K8SAPIService interface.
type MockK8SAPIService struct {
	ctrl     *gomock.Controller
	recorder *MockK8SAPIServiceMockRecorder
}

// MockK8SAPIServiceMockRecorder is the mock recorder for MockK8SAPIService.
type MockK8SAPIServiceMockRecorder struct {
	mock *MockK8SAPIService
}

// NewMockK8SAPIService creates a new mock instance.
func NewMockK8SAPIService(ctrl *gomock.Controller) *MockK8SAPIService {
	mock := &MockK8SAPIService{ctrl: ctrl}
	mock.recorder = &MockK8SAPIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockK8SAPIService) EXPECT() *MockK8SAPIServiceMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockK8SAPIService) Exec(arg0 context.Context, arg1, arg2, arg3 string, arg4 []string, arg5 io.ReadWriter, arg6 io.Writer, arg7 bool, arg8 <-chan ssh.Window) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockK8SAPIServiceMockRecorder) Exec(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockK8SAPIService)(nil).Exec), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// FindDeployment mocks base method.
func (m *MockK8SAPIService) FindDeployment(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDeployment", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeployment indicates an expected call of FindDeployment.
func (mr *MockK8SAPIServiceMockRecorder) FindDeployment(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeployment", reflect.TypeOf((*MockK8SAPIService)(nil).FindDeployment), arg0, arg1, arg2)
}

// Logs mocks base method.
func (m *MockK8SAPIService) Logs(arg0 context.Context, arg1, arg2, arg3 string, arg4 bool, arg5 int64, arg6 io.ReadWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logs indicates an expected call of Logs.
func (mr *MockK8SAPIServiceMockRecorder) Logs(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockK8SAPIService)(nil).Logs), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}
